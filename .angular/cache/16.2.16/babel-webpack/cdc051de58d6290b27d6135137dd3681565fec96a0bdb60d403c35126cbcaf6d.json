{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\n//removed the word internal from the above catchError import\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nconst apiUrl = \"https://harmonix-daebd0a88259.herokuapp.com/\";\nexport class FetchApiDataService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n  }\n  userRegistration(userDetails) {\n    console.log(userDetails);\n    return this.http.post(apiUrl + 'users', userDetails).pipe(catchError(this.handleError));\n  }\n  userLogin(userDetails) {\n    return this.http.post(apiUrl + 'login', userDetails).pipe(map(response => {\n      const extractedData = this.extractResponseData(response);\n      return extractedData;\n    }), tap(extractedData => {\n      if (extractedData && extractedData.user) {\n        const token = extractedData.user;\n        const username = userDetails.Username;\n        localStorage.setItem('token', token);\n        localStorage.setItem('username', username);\n        this.authService.login();\n      }\n    }), catchError(this.handleError));\n  }\n  getAllSongs() {\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + 'songs', {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  getOneSong(title) {\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + `songs/${title}`, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  getArtist(artist) {\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + `songs/artist/${artist}`, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  getGenre(genre) {\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + `songs/genre/${genre}`, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  getUser(userId) {\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + `users/${userId}`, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(response => {\n      const data = this.extractResponseData(response);\n      if (data && data.Birthday) {\n        data.Birthday = this.formatDate(data.Birthday);\n      }\n      return data;\n    }), catchError(this.handleError));\n  }\n  addFavorite(songId) {\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('username');\n    return this.http.post(apiUrl + `users/${userId}/songs/${songId}`, null, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  removeFavorite(songId) {\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('username');\n    return this.http.delete(apiUrl + `users/${userId}/songs/${songId}`, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  editUser(userDetails) {\n    const token = localStorage.getItem('token');\n    let username = localStorage.getItem('username');\n    return this.http.put(apiUrl + `users/${username}`, userDetails, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  deleteUser(user) {\n    const token = localStorage.getItem('token');\n    const username = localStorage.getItem('username');\n    return this.http.delete(apiUrl + `users/${username}`, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      }),\n      responseType: 'text'\n    }).pipe(\n    // map(this.extractResponseData),\n    catchError(this.handleError));\n  }\n  extractResponseData(res) {\n    const body = res;\n    return body || {};\n  }\n  formatDate(dateString) {\n    const date = new Date(dateString);\n    const month = date.getMonth() + 1;\n    const day = date.getDate() + 1;\n    const year = date.getFullYear();\n    return `${year}/${month.toString().padStart(2, '0')}/${day.toString().padStart(2, '0')}`;\n  }\n  handleError(error) {\n    console.error('Full error object:', error);\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `Client-side error: ${error.error.message}`;\n    } else {\n      errorMessage = `Server-side error: Status code ${error.status}, ` + `Error body: ${JSON.stringify(error.error)}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function FetchApiDataService_Factory(t) {\n      return new (t || FetchApiDataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FetchApiDataService,\n      factory: FetchApiDataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","map","HttpHeaders","throwError","tap","apiUrl","FetchApiDataService","constructor","http","authService","userRegistration","userDetails","console","log","post","pipe","handleError","userLogin","response","extractedData","extractResponseData","user","token","username","Username","localStorage","setItem","login","getAllSongs","getItem","get","headers","Authorization","getOneSong","title","getArtist","artist","getGenre","genre","getUser","userId","data","Birthday","formatDate","addFavorite","songId","removeFavorite","delete","editUser","put","deleteUser","responseType","res","body","dateString","date","Date","month","getMonth","day","getDate","year","getFullYear","toString","padStart","error","errorMessage","ErrorEvent","message","status","JSON","stringify","Error","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["/Users/Tommy_1/Documents/Development/CareerFoundry/harmonix-Angular-Client/src/app/fetch-api-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { catchError, map,  } from 'rxjs/operators'; \n//removed the word internal from the above catchError import\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError, tap } from 'rxjs';\nimport { response } from 'express';\nimport { AuthService } from './auth.service';\n\n\n\nconst apiUrl = \"https://harmonix-daebd0a88259.herokuapp.com/\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class FetchApiDataService {\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) { }\n\n  public userRegistration(userDetails: any): Observable<any> {\n    console.log(userDetails);\n    return this.http\n      .post(apiUrl + 'users', userDetails)\n      .pipe(catchError(this.handleError));\n  };\n\n  public userLogin(userDetails: any): Observable<any> {\n    return this.http\n      .post(apiUrl + 'login', userDetails)\n      .pipe(\n        map((response) => {\n          const extractedData = this.extractResponseData(response) ; \n          return extractedData ;\n        }), \n        tap((extractedData) => {\n          if(extractedData && extractedData.user) {\n            const token = extractedData.user;\n            const username = userDetails.Username;\n            \n            localStorage.setItem('token', token);\n            localStorage.setItem('username', username);\n\n            this.authService.login();\n          }\n        }),\n        catchError(this.handleError) \n      );\n  }\n  \n  public getAllSongs(): Observable<any> {\n    const token = localStorage.getItem('token');\n\n    return this.http.get<any>(apiUrl + 'songs', {headers: new HttpHeaders(\n        {Authorization: 'Bearer ' + token,}\n      )}).pipe(\n        map(this.extractResponseData),\n        catchError(this.handleError)\n      );\n  }\n\n  public getOneSong(title: string): Observable<any> {\n    const token = localStorage.getItem('token');\n\n    return this.http.get<any>(apiUrl + `songs/${title}`, {headers: new HttpHeaders(\n      {Authorization: 'Bearer ' + token,}\n    )}).pipe(\n      map(this.extractResponseData),\n      catchError(this.handleError)\n    );\n  }\n\n  public getArtist(artist: string): Observable<any> {\n    const token = localStorage.getItem('token');\n\n    return this.http.get<any>(apiUrl + `songs/artist/${artist}`, {headers: new HttpHeaders(\n      {Authorization: 'Bearer ' + token,}\n    )}).pipe(\n      map(this.extractResponseData),\n      catchError(this.handleError)\n    );\n  }\n\n  public getGenre(genre: string): Observable<any> {\n    const token = localStorage.getItem('token');\n\n    return this.http.get<any>(apiUrl + `songs/genre/${genre}`, {headers: new HttpHeaders(\n      {Authorization: 'Bearer ' + token,}\n    )}).pipe(\n      map(this.extractResponseData),\n      catchError(this.handleError)\n    );\n  }\n\n  public getUser(userId: string): Observable<any> {\n    const token = localStorage.getItem('token');\n    return this.http.get<any>(apiUrl + `users/${userId}`, {headers: new HttpHeaders(\n      {Authorization : 'Bearer ' + token,}\n    )}).pipe(\n      map((response) => {\n        const data = this.extractResponseData(response);\n        if(data && data.Birthday) {\n          data.Birthday = this.formatDate(data.Birthday);\n        }\n        return data;\n      }),\n      catchError(this.handleError)\n    );\n  }\n\n  public addFavorite(songId: string): Observable<any> {\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('username');\n\n    return this.http.post(apiUrl + `users/${userId}/songs/${songId}`, \n    null,\n    {headers: new HttpHeaders(\n      {Authorization : 'Bearer ' + token,}\n    )}).pipe(\n      map(this.extractResponseData),\n      catchError(this.handleError)\n    );\n  }\n\n  public removeFavorite(songId: string): Observable<any> {\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('username');\n\n    return this.http.delete(apiUrl + `users/${userId}/songs/${songId}`, \n    {headers: new HttpHeaders(\n      {Authorization : 'Bearer ' + token,}\n    )}).pipe(\n      map(this.extractResponseData),\n      catchError(this.handleError)\n    );\n  }\n\n  public editUser(userDetails: any): Observable<any> {\n    const token = localStorage.getItem('token');\n    let username = localStorage.getItem('username');\n\n    return this.http.put(apiUrl + `users/${username}`, userDetails,\n    {headers: new HttpHeaders(\n      {Authorization : 'Bearer ' + token,}\n    )}).pipe(\n      map(this.extractResponseData),\n      catchError(this.handleError)\n    );\n  }\n\n  public deleteUser(user: string): Observable<any> {\n    const token = localStorage.getItem('token');\n    const username = localStorage.getItem('username');\n\n    return this.http.delete(apiUrl + `users/${username}`, {headers: new HttpHeaders({\n      Authorization : 'Bearer ' + token,\n    }),\n    responseType: 'text'\n    }).pipe(\n      // map(this.extractResponseData),\n      catchError(this.handleError)\n    );\n  }\n\n  private extractResponseData(res: any): any {\n    const body = res; \n    return body || {};\n  }\n\n  private formatDate(dateString: string): string {\n    const date = new Date(dateString);\n    const month = date.getMonth() + 1;\n    const day = date.getDate() + 1;\n    const year = date.getFullYear();\n\n    return `${year}/${month.toString().padStart(2, '0')}/${day.toString().padStart(2, '0')}`;\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n\n    console.error('Full error object:', error);  \n    let errorMessage = 'An unknown error occurred!';\n  \n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `Client-side error: ${error.error.message}`;\n    } else {\n      errorMessage = `Server-side error: Status code ${error.status}, ` + `Error body: ${JSON.stringify(error.error)}`;\n    }\n    return throwError(() => new Error(errorMessage)); \n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}